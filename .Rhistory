modFit
library(caret)
set.seed(123)
training   <- read.csv("pml-training.csv") # training data
test       <- read.csv("pml-testing.csv" ) # test     data
training$X <- NULL
test$X     <- NULL
percentNA  <- as.vector(colMeans(is.na(training)))
colsNA     <- which(percentNA > 0.97)
training   <- training[, -colsNA]
test       <- test    [, -colsNA]
nsv        <- nearZeroVar(training)
training   <- training[, -nsv]
test       <- test    [, -nsv]
nsv        <- nearZeroVar(training)
training   <- training[, -nsv]
test       <- test    [, -nsv]
colsFactor <- as.vector(which(sapply(training, is.factor)))
preProc    <- preProcess(training[,-colsFactor], method= "pca", thresh= 0.99)
training   <- cbind(predict(preProc, training[, -colsFactor]), training[colsFactor])
test       <- cbind(predict(preProc, test    [, -colsFactor]), test    [colsFactor])
library(caret)
set.seed(123)
training   <- read.csv("pml-training.csv") # training data
test       <- read.csv("pml-testing.csv" ) # test     data
training$X <- NULL
test$X     <- NULL
percentNA  <- as.vector(colMeans(is.na(training)))
colsNA     <- which(percentNA > 0.97)
training   <- training[, -colsNA]
test       <- test    [, -colsNA]
nsv        <- nearZeroVar(training)
training   <- training[, -nsv]
test       <- test    [, -nsv]
colsFactor <- as.vector(which(sapply(training, is.factor)))
preProc    <- preProcess(training[,-colsFactor], method= "pca", thresh= 0.99)
training   <- cbind(predict(preProc, training[, -colsFactor]), training[colsFactor])
test       <- cbind(predict(preProc, test    [, -colsFactor]), test    [colsFactor])
fitControl <- trainControl(method= "cv", number= 10, repeats= 1, verboseIter= F)
modFit     <- train(classe ~ ., method= "rf" , data= training, trControl= fitControl)
modFit
Accuracy   <- max(modFit$results$Accuracy)
modFit$resample
mean(modFit$resample$Accuracy)
p          <- predict(modFit, training)
confusionMatrix(p, training$classe)
predict(modFit, test)
